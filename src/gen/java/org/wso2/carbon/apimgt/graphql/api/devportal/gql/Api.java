/** Generated by the default template from graphql-java-generator */
package org.wso2.carbon.apimgt.graphql.api.devportal.gql;

import com.graphql_java_generator.GraphQLField;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.Transient;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Entity
@GraphQLObjectType("Api")
public class Api  {

	public Api(){
		// No action
	}

	@GraphQLScalar(fieldName = "id", graphQLTypeSimpleName = "String", javaClass = String.class)
	String id;


	@GraphQLScalar(fieldName = "name", graphQLTypeSimpleName = "String", javaClass = String.class)
	String name;


	@GraphQLScalar(fieldName = "description", graphQLTypeSimpleName = "String", javaClass = String.class)
	String description;


	@GraphQLScalar(fieldName = "context", graphQLTypeSimpleName = "String", javaClass = String.class)
	String context;


	@GraphQLScalar(fieldName = "version", graphQLTypeSimpleName = "String", javaClass = String.class)
	String version;


	@GraphQLScalar(fieldName = "provider", graphQLTypeSimpleName = "String", javaClass = String.class)
	String provider;


	@GraphQLScalar(fieldName = "type", graphQLTypeSimpleName = "String", javaClass = String.class)
	String type;


	@GraphQLScalar(fieldName = "apiDefinition", graphQLTypeSimpleName = "String", javaClass = String.class)
	String apiDefinition;


	@GraphQLScalar(fieldName = "transport", graphQLTypeSimpleName = "String", javaClass = String.class)
	String transport;


	@GraphQLScalar(fieldName = "hasthumbnail", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean hasthumbnail;


	@GraphQLScalar(fieldName = "additionalProperties", graphQLTypeSimpleName = "String", javaClass = String.class)
	String additionalProperties;


	@GraphQLScalar(fieldName = "environments", graphQLTypeSimpleName = "String", javaClass = String.class)
	String environments;


	@GraphQLScalar(fieldName = "wsdUrl", graphQLTypeSimpleName = "String", javaClass = String.class)
	String wsdUrl;


	@GraphQLScalar(fieldName = "status", graphQLTypeSimpleName = "String", javaClass = String.class)
	String status;


	@GraphQLScalar(fieldName = "isSubscriptionAvailable", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean isSubscriptionAvailable;


	@GraphQLScalar(fieldName = "monetizationLabel", graphQLTypeSimpleName = "String", javaClass = String.class)
	String monetizationLabel;


	@Transient
	@GraphQLNonScalar(fieldName = "businessInformation", graphQLTypeSimpleName = "BusinessInformation", javaClass = BusinessInformation.class)
	BusinessInformation businessInformation;


	@Transient
	@GraphQLNonScalar(fieldName = "label", graphQLTypeSimpleName = "Label", javaClass = Label.class)
	List<Label> label;


	@Transient
	@GraphQLNonScalar(fieldName = "scope", graphQLTypeSimpleName = "Scope", javaClass = Scope.class)
	List<Scope> scope;


	@Transient
	@GraphQLNonScalar(fieldName = "apiEndPointInformation", graphQLTypeSimpleName = "APIEndpointURLsDTO", javaClass = APIEndpointURLsDTO.class)
	List<APIEndpointURLsDTO> apiEndPointInformation;


	@Transient
	@GraphQLNonScalar(fieldName = "tierInformation", graphQLTypeSimpleName = "Tier", javaClass = Tier.class)
	List<Tier> tierInformation;


	@GraphQLScalar(fieldName = "isDefault", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean isDefault;


	@GraphQLScalar(fieldName = "authorizationHeader", graphQLTypeSimpleName = "String", javaClass = String.class)
	String authorizationHeader;


	@GraphQLScalar(fieldName = "apiSecurity", graphQLTypeSimpleName = "String", javaClass = String.class)
	String apiSecurity;


	@GraphQLScalar(fieldName = "tags", graphQLTypeSimpleName = "String", javaClass = String.class)
	String tags;


	@Transient
	@GraphQLNonScalar(fieldName = "operationInformation", graphQLTypeSimpleName = "Operation", javaClass = Operation.class)
	List<Operation> operationInformation;


	@GraphQLScalar(fieldName = "isMonetizationEnabled", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean isMonetizationEnabled;


	@Transient
	@GraphQLNonScalar(fieldName = "ingressUrl", graphQLTypeSimpleName = "IngressUrl", javaClass = IngressUrl.class)
	List<IngressUrl> ingressUrl;


	@GraphQLScalar(fieldName = "rating", graphQLTypeSimpleName = "Float", javaClass = Double.class)
	Double rating;


	@GraphQLScalar(fieldName = "throttlingPolicies", graphQLTypeSimpleName = "String", javaClass = String.class)
	String throttlingPolicies;


	@GraphQLScalar(fieldName = "thumbnailUrl", graphQLTypeSimpleName = "String", javaClass = String.class)
	String thumbnailUrl;


	@GraphQLScalar(fieldName = "categories", graphQLTypeSimpleName = "String", javaClass = String.class)
	String categories;


	@GraphQLScalar(fieldName = "keyManagers", graphQLTypeSimpleName = "String", javaClass = String.class)
	String keyManagers;


	@Transient
	@GraphQLNonScalar(fieldName = "advertiseInfo", graphQLTypeSimpleName = "Advertise", javaClass = Advertise.class)
	Advertise advertiseInfo;


	@GraphQLScalar(fieldName = "createdTime", graphQLTypeSimpleName = "String", javaClass = String.class)
	String createdTime;


	@GraphQLScalar(fieldName = "lastUpdate", graphQLTypeSimpleName = "String", javaClass = String.class)
	String lastUpdate;



	public void setId(String id) {
		this.id = id;
	}

	public String getId() {
		return id;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getName() {
		return name;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public String getDescription() {
		return description;
	}

	public void setContext(String context) {
		this.context = context;
	}

	public String getContext() {
		return context;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	public String getVersion() {
		return version;
	}

	public void setProvider(String provider) {
		this.provider = provider;
	}

	public String getProvider() {
		return provider;
	}

	public void setType(String type) {
		this.type = type;
	}

	public String getType() {
		return type;
	}

	public void setApiDefinition(String apiDefinition) {
		this.apiDefinition = apiDefinition;
	}

	public String getApiDefinition() {
		return apiDefinition;
	}

	public void setTransport(String transport) {
		this.transport = transport;
	}

	public String getTransport() {
		return transport;
	}

	public void setHasthumbnail(Boolean hasthumbnail) {
		this.hasthumbnail = hasthumbnail;
	}

	public Boolean getHasthumbnail() {
		return hasthumbnail;
	}

	public void setAdditionalProperties(String additionalProperties) {
		this.additionalProperties = additionalProperties;
	}

	public String getAdditionalProperties() {
		return additionalProperties;
	}

	public void setEnvironments(String environments) {
		this.environments = environments;
	}

	public String getEnvironments() {
		return environments;
	}

	public void setWsdUrl(String wsdUrl) {
		this.wsdUrl = wsdUrl;
	}

	public String getWsdUrl() {
		return wsdUrl;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public String getStatus() {
		return status;
	}

	public void setIsSubscriptionAvailable(Boolean isSubscriptionAvailable) {
		this.isSubscriptionAvailable = isSubscriptionAvailable;
	}

	public Boolean getIsSubscriptionAvailable() {
		return isSubscriptionAvailable;
	}

	public void setMonetizationLabel(String monetizationLabel) {
		this.monetizationLabel = monetizationLabel;
	}

	public String getMonetizationLabel() {
		return monetizationLabel;
	}

	public void setBusinessInformation(BusinessInformation businessInformation) {
		this.businessInformation = businessInformation;
	}

	public BusinessInformation getBusinessInformation() {
		return businessInformation;
	}

	public void setLabel(List<Label> label) {
		this.label = label;
	}

	public List<Label> getLabel() {
		return label;
	}

	public void setScope(List<Scope> scope) {
		this.scope = scope;
	}

	public List<Scope> getScope() {
		return scope;
	}

	public void setApiEndPointInformation(List<APIEndpointURLsDTO> apiEndPointInformation) {
		this.apiEndPointInformation = apiEndPointInformation;
	}

	public List<APIEndpointURLsDTO> getApiEndPointInformation() {
		return apiEndPointInformation;
	}

	public void setTierInformation(List<Tier> tierInformation) {
		this.tierInformation = tierInformation;
	}

	public List<Tier> getTierInformation() {
		return tierInformation;
	}

	public void setIsDefault(Boolean isDefault) {
		this.isDefault = isDefault;
	}

	public Boolean getIsDefault() {
		return isDefault;
	}

	public void setAuthorizationHeader(String authorizationHeader) {
		this.authorizationHeader = authorizationHeader;
	}

	public String getAuthorizationHeader() {
		return authorizationHeader;
	}

	public void setApiSecurity(String apiSecurity) {
		this.apiSecurity = apiSecurity;
	}

	public String getApiSecurity() {
		return apiSecurity;
	}

	public void setTags(String tags) {
		this.tags = tags;
	}

	public String getTags() {
		return tags;
	}

	public void setOperationInformation(List<Operation> operationInformation) {
		this.operationInformation = operationInformation;
	}

	public List<Operation> getOperationInformation() {
		return operationInformation;
	}

	public void setIsMonetizationEnabled(Boolean isMonetizationEnabled) {
		this.isMonetizationEnabled = isMonetizationEnabled;
	}

	public Boolean getIsMonetizationEnabled() {
		return isMonetizationEnabled;
	}

	public void setIngressUrl(List<IngressUrl> ingressUrl) {
		this.ingressUrl = ingressUrl;
	}

	public List<IngressUrl> getIngressUrl() {
		return ingressUrl;
	}

	public void setRating(Double rating) {
		this.rating = rating;
	}

	public Double getRating() {
		return rating;
	}

	public void setThrottlingPolicies(String throttlingPolicies) {
		this.throttlingPolicies = throttlingPolicies;
	}

	public String getThrottlingPolicies() {
		return throttlingPolicies;
	}

	public void setThumbnailUrl(String thumbnailUrl) {
		this.thumbnailUrl = thumbnailUrl;
	}

	public String getThumbnailUrl() {
		return thumbnailUrl;
	}

	public void setCategories(String categories) {
		this.categories = categories;
	}

	public String getCategories() {
		return categories;
	}

	public void setKeyManagers(String keyManagers) {
		this.keyManagers = keyManagers;
	}

	public String getKeyManagers() {
		return keyManagers;
	}

	public void setAdvertiseInfo(Advertise advertiseInfo) {
		this.advertiseInfo = advertiseInfo;
	}

	public Advertise getAdvertiseInfo() {
		return advertiseInfo;
	}

	public void setCreatedTime(String createdTime) {
		this.createdTime = createdTime;
	}

	public String getCreatedTime() {
		return createdTime;
	}

	public void setLastUpdate(String lastUpdate) {
		this.lastUpdate = lastUpdate;
	}

	public String getLastUpdate() {
		return lastUpdate;
	}

    public String toString() {
        return "Api {"
				+ "id: " + id
				+ ", "
				+ "name: " + name
				+ ", "
				+ "description: " + description
				+ ", "
				+ "context: " + context
				+ ", "
				+ "version: " + version
				+ ", "
				+ "provider: " + provider
				+ ", "
				+ "type: " + type
				+ ", "
				+ "apiDefinition: " + apiDefinition
				+ ", "
				+ "transport: " + transport
				+ ", "
				+ "hasthumbnail: " + hasthumbnail
				+ ", "
				+ "additionalProperties: " + additionalProperties
				+ ", "
				+ "environments: " + environments
				+ ", "
				+ "wsdUrl: " + wsdUrl
				+ ", "
				+ "status: " + status
				+ ", "
				+ "isSubscriptionAvailable: " + isSubscriptionAvailable
				+ ", "
				+ "monetizationLabel: " + monetizationLabel
				+ ", "
				+ "businessInformation: " + businessInformation
				+ ", "
				+ "label: " + label
				+ ", "
				+ "scope: " + scope
				+ ", "
				+ "apiEndPointInformation: " + apiEndPointInformation
				+ ", "
				+ "tierInformation: " + tierInformation
				+ ", "
				+ "isDefault: " + isDefault
				+ ", "
				+ "authorizationHeader: " + authorizationHeader
				+ ", "
				+ "apiSecurity: " + apiSecurity
				+ ", "
				+ "tags: " + tags
				+ ", "
				+ "operationInformation: " + operationInformation
				+ ", "
				+ "isMonetizationEnabled: " + isMonetizationEnabled
				+ ", "
				+ "ingressUrl: " + ingressUrl
				+ ", "
				+ "rating: " + rating
				+ ", "
				+ "throttlingPolicies: " + throttlingPolicies
				+ ", "
				+ "thumbnailUrl: " + thumbnailUrl
				+ ", "
				+ "categories: " + categories
				+ ", "
				+ "keyManagers: " + keyManagers
				+ ", "
				+ "advertiseInfo: " + advertiseInfo
				+ ", "
				+ "createdTime: " + createdTime
				+ ", "
				+ "lastUpdate: " + lastUpdate
        		+ "}";
    }

    /**
	 * Enum of field names
	 */
	 public static enum Field implements GraphQLField {
		Id("id"),
		Name("name"),
		Description("description"),
		Context("context"),
		Version("version"),
		Provider("provider"),
		Type("type"),
		ApiDefinition("apiDefinition"),
		Transport("transport"),
		Hasthumbnail("hasthumbnail"),
		AdditionalProperties("additionalProperties"),
		Environments("environments"),
		WsdUrl("wsdUrl"),
		Status("status"),
		IsSubscriptionAvailable("isSubscriptionAvailable"),
		MonetizationLabel("monetizationLabel"),
		BusinessInformation("businessInformation"),
		Label("label"),
		Scope("scope"),
		ApiEndPointInformation("apiEndPointInformation"),
		TierInformation("tierInformation"),
		IsDefault("isDefault"),
		AuthorizationHeader("authorizationHeader"),
		ApiSecurity("apiSecurity"),
		Tags("tags"),
		OperationInformation("operationInformation"),
		IsMonetizationEnabled("isMonetizationEnabled"),
		IngressUrl("ingressUrl"),
		Rating("rating"),
		ThrottlingPolicies("throttlingPolicies"),
		ThumbnailUrl("thumbnailUrl"),
		Categories("categories"),
		KeyManagers("keyManagers"),
		AdvertiseInfo("advertiseInfo"),
		CreatedTime("createdTime"),
		LastUpdate("lastUpdate");

		private String fieldName;

		Field(String fieldName) {
			this.fieldName = fieldName;
		}

		public String getFieldName() {
			return fieldName;
		}

		public Class<?> getGraphQLType() {
			return this.getClass().getDeclaringClass();
		}

	}

	public static Builder builder() {
			return new Builder();
		}



	/**
	 * Builder
	 */
	public static class Builder {
		private String id;
		private String name;
		private String description;
		private String context;
		private String version;
		private String provider;
		private String type;
		private String apiDefinition;
		private String transport;
		private Boolean hasthumbnail;
		private String additionalProperties;
		private String environments;
		private String wsdUrl;
		private String status;
		private Boolean isSubscriptionAvailable;
		private String monetizationLabel;
		private BusinessInformation businessInformation;
		private List<Label> label;
		private List<Scope> scope;
		private List<APIEndpointURLsDTO> apiEndPointInformation;
		private List<Tier> tierInformation;
		private Boolean isDefault;
		private String authorizationHeader;
		private String apiSecurity;
		private String tags;
		private List<Operation> operationInformation;
		private Boolean isMonetizationEnabled;
		private List<IngressUrl> ingressUrl;
		private Double rating;
		private String throttlingPolicies;
		private String thumbnailUrl;
		private String categories;
		private String keyManagers;
		private Advertise advertiseInfo;
		private String createdTime;
		private String lastUpdate;


		public Builder withId(String id) {
			this.id = id;
			return this;
		}
		public Builder withName(String name) {
			this.name = name;
			return this;
		}
		public Builder withDescription(String description) {
			this.description = description;
			return this;
		}
		public Builder withContext(String context) {
			this.context = context;
			return this;
		}
		public Builder withVersion(String version) {
			this.version = version;
			return this;
		}
		public Builder withProvider(String provider) {
			this.provider = provider;
			return this;
		}
		public Builder withType(String type) {
			this.type = type;
			return this;
		}
		public Builder withApiDefinition(String apiDefinition) {
			this.apiDefinition = apiDefinition;
			return this;
		}
		public Builder withTransport(String transport) {
			this.transport = transport;
			return this;
		}
		public Builder withHasthumbnail(Boolean hasthumbnail) {
			this.hasthumbnail = hasthumbnail;
			return this;
		}
		public Builder withAdditionalProperties(String additionalProperties) {
			this.additionalProperties = additionalProperties;
			return this;
		}
		public Builder withEnvironments(String environments) {
			this.environments = environments;
			return this;
		}
		public Builder withWsdUrl(String wsdUrl) {
			this.wsdUrl = wsdUrl;
			return this;
		}
		public Builder withStatus(String status) {
			this.status = status;
			return this;
		}
		public Builder withIsSubscriptionAvailable(Boolean isSubscriptionAvailable) {
			this.isSubscriptionAvailable = isSubscriptionAvailable;
			return this;
		}
		public Builder withMonetizationLabel(String monetizationLabel) {
			this.monetizationLabel = monetizationLabel;
			return this;
		}
		public Builder withBusinessInformation(BusinessInformation businessInformation) {
			this.businessInformation = businessInformation;
			return this;
		}
		public Builder withLabel(List<Label> label) {
			this.label = label;
			return this;
		}
		public Builder withScope(List<Scope> scope) {
			this.scope = scope;
			return this;
		}
		public Builder withApiEndPointInformation(List<APIEndpointURLsDTO> apiEndPointInformation) {
			this.apiEndPointInformation = apiEndPointInformation;
			return this;
		}
		public Builder withTierInformation(List<Tier> tierInformation) {
			this.tierInformation = tierInformation;
			return this;
		}
		public Builder withIsDefault(Boolean isDefault) {
			this.isDefault = isDefault;
			return this;
		}
		public Builder withAuthorizationHeader(String authorizationHeader) {
			this.authorizationHeader = authorizationHeader;
			return this;
		}
		public Builder withApiSecurity(String apiSecurity) {
			this.apiSecurity = apiSecurity;
			return this;
		}
		public Builder withTags(String tags) {
			this.tags = tags;
			return this;
		}
		public Builder withOperationInformation(List<Operation> operationInformation) {
			this.operationInformation = operationInformation;
			return this;
		}
		public Builder withIsMonetizationEnabled(Boolean isMonetizationEnabled) {
			this.isMonetizationEnabled = isMonetizationEnabled;
			return this;
		}
		public Builder withIngressUrl(List<IngressUrl> ingressUrl) {
			this.ingressUrl = ingressUrl;
			return this;
		}
		public Builder withRating(Double rating) {
			this.rating = rating;
			return this;
		}
		public Builder withThrottlingPolicies(String throttlingPolicies) {
			this.throttlingPolicies = throttlingPolicies;
			return this;
		}
		public Builder withThumbnailUrl(String thumbnailUrl) {
			this.thumbnailUrl = thumbnailUrl;
			return this;
		}
		public Builder withCategories(String categories) {
			this.categories = categories;
			return this;
		}
		public Builder withKeyManagers(String keyManagers) {
			this.keyManagers = keyManagers;
			return this;
		}
		public Builder withAdvertiseInfo(Advertise advertiseInfo) {
			this.advertiseInfo = advertiseInfo;
			return this;
		}
		public Builder withCreatedTime(String createdTime) {
			this.createdTime = createdTime;
			return this;
		}
		public Builder withLastUpdate(String lastUpdate) {
			this.lastUpdate = lastUpdate;
			return this;
		}

		public Api build() {
			Api _object = new Api();
			_object.setId(id);
			_object.setName(name);
			_object.setDescription(description);
			_object.setContext(context);
			_object.setVersion(version);
			_object.setProvider(provider);
			_object.setType(type);
			_object.setApiDefinition(apiDefinition);
			_object.setTransport(transport);
			_object.setHasthumbnail(hasthumbnail);
			_object.setAdditionalProperties(additionalProperties);
			_object.setEnvironments(environments);
			_object.setWsdUrl(wsdUrl);
			_object.setStatus(status);
			_object.setIsSubscriptionAvailable(isSubscriptionAvailable);
			_object.setMonetizationLabel(monetizationLabel);
			_object.setBusinessInformation(businessInformation);
			_object.setLabel(label);
			_object.setScope(scope);
			_object.setApiEndPointInformation(apiEndPointInformation);
			_object.setTierInformation(tierInformation);
			_object.setIsDefault(isDefault);
			_object.setAuthorizationHeader(authorizationHeader);
			_object.setApiSecurity(apiSecurity);
			_object.setTags(tags);
			_object.setOperationInformation(operationInformation);
			_object.setIsMonetizationEnabled(isMonetizationEnabled);
			_object.setIngressUrl(ingressUrl);
			_object.setRating(rating);
			_object.setThrottlingPolicies(throttlingPolicies);
			_object.setThumbnailUrl(thumbnailUrl);
			_object.setCategories(categories);
			_object.setKeyManagers(keyManagers);
			_object.setAdvertiseInfo(advertiseInfo);
			_object.setCreatedTime(createdTime);
			_object.setLastUpdate(lastUpdate);
			return _object;
		}
	}
}
