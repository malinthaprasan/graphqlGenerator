/** Generated by the default template from graphql-java-generator */
package org.wso2.carbon.apimgt.graphql.api.devportal.gql;

import java.util.List;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.dataloader.BatchLoader;
import org.dataloader.DataLoader;
import org.reactivestreams.Publisher;
import org.springframework.stereotype.Component;

import com.graphql_java_generator.GraphqlUtils;

import graphql.schema.DataFetcher;


/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@Component
public class GraphQLDataFetchers {

	/** The logger for this instance */
	protected Logger logger = LoggerFactory.getLogger(GraphQLDataFetchers.class);

	@Resource
	DataFetchersDelegateApi dataFetchersDelegateApi;

//	@Resource
//	DataFetchersDelegateLabel dataFetchersDelegateLabel;

//	@Resource
//	DataFetchersDelegateIngressUrl dataFetchersDelegateIngressUrl;
//
//	@Resource
//	DataFetchersDelegateTier dataFetchersDelegateTier;
//
//	@Resource
//	DataFetchersDelegateAPIEndpointURLsDTO dataFetchersDelegateAPIEndpointURLsDTO;
//
//	@Resource
//	DataFetchersDelegateApiListing dataFetchersDelegateApiListing;

	@Resource
	DataFetchersDelegateQuery dataFetchersDelegateQuery;

	@Resource
	GraphqlUtils graphqlUtils;

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateApi
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<BusinessInformation> dataFetchersDelegateApiBusinessInformation() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			BusinessInformation ret = null;
			try {
				ret = dataFetchersDelegateApi.businessInformation(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("businessInformation: 1 result found");
			else
				logger.debug("businessInformation: no result found");

			return ret;
		};
	}


	public DataFetcher<List<Label>> dataFetchersDelegateApiLabel() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			 List<Label> ret = dataFetchersDelegateApi.label(dataFetchingEnvironment, source);
			logger.debug("label: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Scope>> dataFetchersDelegateApiScope() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			 List<Scope> ret = dataFetchersDelegateApi.scope(dataFetchingEnvironment, source);
			logger.debug("scope: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<APIEndpointURLsDTO>> dataFetchersDelegateApiApiEndPointInformation() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			 List<APIEndpointURLsDTO> ret = dataFetchersDelegateApi.apiEndPointInformation(dataFetchingEnvironment, source);
			logger.debug("apiEndPointInformation: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Tier>> dataFetchersDelegateApiTierInformation() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			 List<Tier> ret = dataFetchersDelegateApi.tierInformation(dataFetchingEnvironment, source);
			logger.debug("tierInformation: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<Operation>> dataFetchersDelegateApiOperationInformation() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			 List<Operation> ret = dataFetchersDelegateApi.operationInformation(dataFetchingEnvironment, source);
			logger.debug("operationInformation: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<List<IngressUrl>> dataFetchersDelegateApiIngressUrl() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			 List<IngressUrl> ret = dataFetchersDelegateApi.ingressUrl(dataFetchingEnvironment, source);
			logger.debug("ingressUrl: {} found rows", (ret==null) ? 0 : ret.size());

			return ret;
		};
	}


	public DataFetcher<Advertise> dataFetchersDelegateApiAdvertiseInfo() {
		return dataFetchingEnvironment -> {
  			Api source = dataFetchingEnvironment.getSource();

			Advertise ret = null;
			try {
				ret = dataFetchersDelegateApi.advertiseInfo(dataFetchingEnvironment, source);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("advertiseInfo: 1 result found");
			else
				logger.debug("advertiseInfo: no result found");

			return ret;
		};
	}

	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateLabel
	////////////////////////////////////////////////////////////////////////////////////////////////
//
//	public DataFetcher<List<LabelDetails>> dataFetchersDelegateLabelLabelDetails() {
//		return dataFetchingEnvironment -> {
//  			Label source = dataFetchingEnvironment.getSource();
//
//			 List<LabelDetails> ret = dataFetchersDelegateLabel.labelDetails(dataFetchingEnvironment, source);
//			logger.debug("labelDetails: {} found rows", (ret==null) ? 0 : ret.size());
//
//			return ret;
//		};
//	}
//
//	////////////////////////////////////////////////////////////////////////////////////////////////
//	// Data fetchers for DataFetchersDelegateIngressUrl
//	////////////////////////////////////////////////////////////////////////////////////////////////
//
//	public DataFetcher<List<DeploymentClusterInformation>> dataFetchersDelegateIngressUrlClusterDetails() {
//		return dataFetchingEnvironment -> {
//  			IngressUrl source = dataFetchingEnvironment.getSource();
//
//			 List<DeploymentClusterInformation> ret = dataFetchersDelegateIngressUrl.clusterDetails(dataFetchingEnvironment, source);
//			logger.debug("clusterDetails: {} found rows", (ret==null) ? 0 : ret.size());
//
//			return ret;
//		};
//	}
//
//	////////////////////////////////////////////////////////////////////////////////////////////////
//	// Data fetchers for DataFetchersDelegateTier
//	////////////////////////////////////////////////////////////////////////////////////////////////
//
//	public DataFetcher<List<TierDetails>> dataFetchersDelegateTierTierDetails() {
//		return dataFetchingEnvironment -> {
//  			Tier source = dataFetchingEnvironment.getSource();
//
//			 List<TierDetails> ret = dataFetchersDelegateTier.tierDetails(dataFetchingEnvironment, source);
//			logger.debug("tierDetails: {} found rows", (ret==null) ? 0 : ret.size());
//
//			return ret;
//		};
//	}
//
//	////////////////////////////////////////////////////////////////////////////////////////////////
//	// Data fetchers for DataFetchersDelegateAPIEndpointURLsDTO
//	////////////////////////////////////////////////////////////////////////////////////////////////
//
//	public DataFetcher<URL> dataFetchersDelegateAPIEndpointURLsDTOUrLs() {
//		return dataFetchingEnvironment -> {
//  			APIEndpointURLsDTO source = dataFetchingEnvironment.getSource();
//
//			URL ret = null;
//			try {
//				ret = dataFetchersDelegateAPIEndpointURLsDTO.urLs(dataFetchingEnvironment, source);
//			} catch (NoSuchElementException e) {
//				// There was no items in the Optional
//			}
//
//			if (ret != null)
//				logger.debug("urLs: 1 result found");
//			else
//				logger.debug("urLs: no result found");
//
//			return ret;
//		};
//	}
//
//
//	public DataFetcher<DefaultURL> dataFetchersDelegateAPIEndpointURLsDTODefaultUrls() {
//		return dataFetchingEnvironment -> {
//  			APIEndpointURLsDTO source = dataFetchingEnvironment.getSource();
//
//			DefaultURL ret = null;
//			try {
//				ret = dataFetchersDelegateAPIEndpointURLsDTO.defaultUrls(dataFetchingEnvironment, source);
//			} catch (NoSuchElementException e) {
//				// There was no items in the Optional
//			}
//
//			if (ret != null)
//				logger.debug("defaultUrls: 1 result found");
//			else
//				logger.debug("defaultUrls: no result found");
//
//			return ret;
//		};
//	}
//
//	////////////////////////////////////////////////////////////////////////////////////////////////
//	// Data fetchers for DataFetchersDelegateApiListing
//	////////////////////////////////////////////////////////////////////////////////////////////////
//
//	public DataFetcher<List<Api>> dataFetchersDelegateApiListingGetAllapis() {
//		return dataFetchingEnvironment -> {
//  			ApiListing source = dataFetchingEnvironment.getSource();
//
//			 List<Api> ret = dataFetchersDelegateApiListing.getAllapis(dataFetchingEnvironment, source);
//			logger.debug("getAllapis: {} found rows", (ret==null) ? 0 : ret.size());
//
//			return ret;
//		};
//	}
//
//
//	public DataFetcher<Pagination> dataFetchersDelegateApiListingPagination() {
//		return dataFetchingEnvironment -> {
//  			ApiListing source = dataFetchingEnvironment.getSource();
//
//			Pagination ret = null;
//			try {
//				ret = dataFetchersDelegateApiListing.pagination(dataFetchingEnvironment, source);
//			} catch (NoSuchElementException e) {
//				// There was no items in the Optional
//			}
//
//			if (ret != null)
//				logger.debug("pagination: 1 result found");
//			else
//				logger.debug("pagination: no result found");
//
//			return ret;
//		};
//	}
//
	////////////////////////////////////////////////////////////////////////////////////////////////
	// Data fetchers for DataFetchersDelegateQuery
	////////////////////////////////////////////////////////////////////////////////////////////////

	public DataFetcher<ApiListing> dataFetchersDelegateQueryGetApiListing() {
		return dataFetchingEnvironment -> {
			Integer start = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("start"), "${argument.type.graphQLTypeSimpleName}", "java.lang.String", Integer.class);
			Integer offset = (Integer) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("offset"), "${argument.type.graphQLTypeSimpleName}", "java.lang.String", Integer.class);

			ApiListing ret = null;
			try {
				ret = dataFetchersDelegateQuery.getApiListing(dataFetchingEnvironment, start, offset);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("getApiListing: 1 result found");
			else
				logger.debug("getApiListing: no result found");

			return ret;
		};
	}


	public DataFetcher<Api> dataFetchersDelegateQueryGetApi() {
		return dataFetchingEnvironment -> {
			String id = (String) graphqlUtils.getArgument(dataFetchingEnvironment.getArgument("id"), "${argument.type.graphQLTypeSimpleName}", "java.lang.String", String.class);

			Api ret = null;
			try {
				ret = dataFetchersDelegateQuery.getApi(dataFetchingEnvironment, id);
			} catch (NoSuchElementException e) {
				// There was no items in the Optional
			}

			if (ret != null)
				logger.debug("getApi: 1 result found");
			else
				logger.debug("getApi: no result found");

			return ret;
		};
	}

//
//	public DataFetcher<List<Tag>> dataFetchersDelegateQueryGetTags() {
//		return dataFetchingEnvironment -> {
//
//			 List<Tag> ret = dataFetchersDelegateQuery.getTags(dataFetchingEnvironment);
//			logger.debug("getTags: {} found rows", (ret==null) ? 0 : ret.size());
//
//			return ret;
//		};
//	}

}
